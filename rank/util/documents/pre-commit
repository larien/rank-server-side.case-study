#!/bin/bash
#
# Check a "few" things to help write more maintainable Go code.

RED='\033[0;31m'
LPURPLE='\033[1;35m'
DGRAY='\033[1;30m'
VGREEN='\033[0;32m'
NC='\033[0m' # No Color

declare total_issues=0

# git gofmt pre-commit hook
	#
	# To use, store as .git/hooks/pre-commit inside your repository and make sure
	# it has execute permissions.
	#
	# This script does not handle file names that contain spaces.
	
	gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')
	[ -z "$gofiles" ] && exit 0
	
	unformatted=$(gofmt -l $gofiles)
	[ -z "$unformatted" ] && exit 0
	
	# Some files are not gofmt'd. Print message and fail.
	
	echo >&2 "Go files must be formatted with gofmt. Please run:"
	for fn in $unformatted; do
		echo >&2 "  gofmt -w $PWD/$fn"
	done

# errcheck warns about unchecked errors in your code.
# https://github.com/kisielk/errcheck
# declare errcheck_result=$(errcheck ./...)
# if [[ $errcheck_result ]]; then
# 	errcheck_count=$(wc -l <<< "$errcheck_result")
# 	total_issues=$(($total_issues+$errcheck_count))
# 	printf "${LPURPLE}Unchecked errors${NC} (${errcheck_count// })\n"
# 	# normal
# 	# printf "$errcheck_result"
# 	# dim the file path and line numbers
# 	echo "$errcheck_result" | GREP_COLOR='2;39' grep --color=always -E '^.+[0-9]\:*\s'
# 	printf "\n\n"
# fi

# gocyclo reports cyclomatic complexity.
# https://github.com/fzipp/gocyclo
cyclo_tolerance=5
declare cyclo_result=$(gocyclo -over "$cyclo_tolerance" .)
if [[ $cyclo_result ]]; then
	cyclo_count=$(wc -l <<< "$cyclo_result")
	total_issues=$(($total_issues+$cyclo_count))
	printf "${LPURPLE}Cyclomatic complexity above ${cyclo_tolerance}${NC} (${cyclo_count// })\n"
	printf "$cyclo_result\n\n"
else
	printf "${VGREEN}Good cyclomatic complexity\n\n"
fi

# If there were issues, exit 1
if [ $total_issues -gt 0 ]; then
	# There were some issues that might need attention
	exit 1
fi

exit 0
